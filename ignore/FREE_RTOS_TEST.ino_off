#include <Arduino_FreeRTOS.h>

#include "car_hal.h"  // Enable/Disable features at the top of this file
#if USE_IR
#include <IRremote.hpp>
#endif  // USE_IR

// define two tasks for Blink & IRRead
void TaskBlink(void *pvParameters);
void TaskIRRead(void *pvParameters);

CAR_HAL car_hal;

#define LED_BRIGHTNESS 0.05  // 0.0 - 1.0

// the setup function runs once when you press reset or power the board
void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(115200);

  while (!Serial) {
    ;  // wait for serial port to connect. Needed for native USB, on LEONARDO,
       // MICRO, YUN, and other 32u4 based boards.
  }

  // Now set up two tasks to run independently.
  xTaskCreate(TaskBlink, "Blink"  // A name just for humans
              ,
              128  // This stack size can be checked & adjusted by reading the
                   // Stack Highwater
              ,
              NULL, 2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the
                       // highest, and 0 being the lowest.
              ,
              NULL);

  xTaskCreate(TaskIRRead, "IRRead", 128  // Stack size
              ,
              NULL, 1  // Priority
              ,
              NULL);

  // Now the task scheduler, which takes over control of scheduling individual
  // tasks, is automatically started.
}

void loop() {
  // Empty. Things are done in Tasks.
}

/*--------------------------------------------------*/
/*---------------------- Tasks ---------------------*/
/*--------------------------------------------------*/

void TaskBlink(void *pvParameters)  // This is a task.
{
  (void)pvParameters;

  car_hal.LED_Setup();
  car_hal.LED_Control(0, 0, 0, LED_BRIGHTNESS);
  Serial.println("Configured LED");

  for (;;)  // A Task shall never return or exit.
  {
    car_hal.LED_Control(255, 0, 0, LED_BRIGHTNESS);
    vTaskDelay(1000 / portTICK_PERIOD_MS);  // wait for one second
    car_hal.LED_Control(0, 255, 0, LED_BRIGHTNESS);
    vTaskDelay(1000 / portTICK_PERIOD_MS);  // wait for one second
  }
}

void TaskIRRead(void *pvParameters)  // This is a task.
{
  (void)pvParameters;

  uint16_t message;

  car_hal.IR_Setup();
  Serial.println("Configured IR");

  for (;;) {
    if (car_hal.IR_GetMessage(&message)) {
      Serial.println(message);
    }
    vTaskDelay(1);  // one tick delay (15ms) in between reads for stability
  }
}
